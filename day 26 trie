// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;

class TrieNode{
    public:
    char data;
    TrieNode* children[26];
    bool isTerminal;
    //constructor
    TrieNode(char ch){
        data = ch;
        for(int i = 0 ; i < 26 ;i++){
            children[i] = NULL;
        }
        isTerminal = false;
    }
};

class Trie{
    TrieNode* root  ;
    //constructor
    public:
    Trie(){
        root = new TrieNode('\0');
    }
    //insertion 
    void insertWord(string word){
        insertUtil(root , word);
    }
    void insertUtil(TrieNode* root , string word){
        //base case
        if(word.size() == 0){
            root->isTerminal = true;
            return;
        }
        int index = word[0] - 'A';
        TrieNode* child;
        //present
        if(root->children[index] != NULL){
            child = root->children[index];
        }else{
            //absent hai 
            child = new TrieNode(word[0]);
            root->children[index] = child;
        }
        //baki ka recc dekh lega 
        insertUtil(child , word.substr(1));
    }
    
    bool searchword(string word){
        return searchUtil(root , word);
    }
    bool searchUtil(TrieNode* root , string word){
        //base case
        if(word.size() == 0){
            return root->isTerminal;
        }
        int index = word[0] - 'A';
        TrieNode* child;
        if(root->children[index] != NULL){
            child = root->children[index];
        }else{
            return false;
        }
        //recc
        return searchUtil(child , word.substr(1));
    }
    void removeword(string word){
        removeUtil(root , word);
    }
    bool removeUtil(TrieNode* root , string word){
        //base case
        if(word.size() == 0){
            if(root->isTerminal){
                root->isTerminal = false;
                return isEmpty(root);
            }
            return false;
        }
        int index = word[0] - 'A';
        TrieNode* child = root->children[index];
        if(child == NULL)return false;
        bool shoulddeletechild = removeUtil(child , word.substr(1));
        if(shoulddeletechild){
            delete child;
            root->children[index] = NULL;
            
            return !root->isTerminal && isEmpty(root);
        }
        return false;
        
    }
    bool isEmpty(TrieNode* root){
        for(int i = 0 ; i < 26 ; i++){
            if(root->children[i] != NULL)return false;
        }
        return true;
    }
    
    
    
};

int main() {
    Trie* t = new Trie();
    t->insertWord("hello");
    t->insertWord("welcome");
    cout<<"search for hello before deleted:->      "<<t->searchword("hello");
    cout<<endl<<"delete kar rha hu  hello ko ;->>>>"<<endl;
    t->removeword("hello");
    cout<<"search for hello after deleted:->      "<<t->searchword("hello");

    return 0;
}





//impllement trie (coding ninjas )
/*
    Your Trie object will be instantiated and called as such:
    Trie* obj = new Trie();
    obj->insert(word);
    bool check2 = obj->search(word);
    bool check3 = obj->startsWith(prefix);
 */


class TrieNode{
    public:
    char data;
    TrieNode* children[26];
    bool isTerminal;
    TrieNode(char ch){
        data = ch;
        for(int i = 0 ; i < 26 ; i++){
            children[i] = NULL;
        }
        isTerminal = false;
    }

};


class Trie {

public:
   TrieNode* root;

    /** Initialize your data structure here. */
    Trie() {
        root = new TrieNode('\0');

    }

    /** Inserts a word into the trie. */
    void insertUtil(TrieNode* root , string word){
        //base case
        if(word.size() == 0){
            root->isTerminal = true;
            return;
        }
        int index = word[0] - 'a';
        TrieNode* child;
        //present 
        if(root->children[index] != NULL){
            child =  root->children[index];
        }else{
            child  = new TrieNode(word[0]);
            root->children[index] = child;
        }
        //recc
        insertUtil(child , word.substr(1));

    }
    void insert(string word) {
        insertUtil(root , word);

    }

    /** Returns if the word is in the trie. */
    bool searchUtil(TrieNode* root  , string word){
        //base case
        if(word.size() == 0)
            return root->isTerminal;
        int index = word[0] - 'a';
        TrieNode* child;
        if(root->children[index] != NULL)
            child = root->children[index];
        else
            return false;
            
        //recc
        return searchUtil(child , word.substr(1));
        
    }
    bool search(string word) {
        return searchUtil(root , word);

    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool prefixUtil(TrieNode* root , string prefix){
        //base case
        if(prefix.size() == 0)return true;
        int index = prefix[0] - 'a';
        TrieNode* child;
        if(root->children[index] != NULL){
            child = root->children[index];
        }else{
            return false;
        }
        //recc
        return prefixUtil(child , prefix.substr(1));

    }
    bool startsWith(string prefix) {
        return prefixUtil(root , prefix);

    }
};




//lcp (leetcode)

class TrieNode{
    public:
    char data;
    int childcount;
    TrieNode* children[26];
    bool isTerminal;
    //constructor
    TrieNode(char ch){
        data = ch;
        for(int i = 0 ; i < 26 ;i++){
            children[i] = NULL;
        }
        childcount = 0;
        isTerminal = false;
    }
};

class Trie{
    TrieNode* root  ;
    //constructor
    public:
    Trie(){
        root = new TrieNode('\0');
    }
    //insertion 
    void insertWord(string word){
        insertUtil(root , word);
    }
    void insertUtil(TrieNode* root , string word){
        //base case
        if(word.size() == 0){
            root->isTerminal = true;
            return;
        }
        int index = word[0] - 'a';
        TrieNode* child;
        //present
        if(root->children[index] != NULL){
            child = root->children[index];
        }else{
            //absent hai 
            child = new TrieNode(word[0]);
            root->childcount++;
            root->children[index] = child;
        }
        //baki ka recc dekh lega 
        insertUtil(child , word.substr(1));
    }
    void lcp(string str , string &ans){
        for(int i = 0 ; i < str.size() ; i++){
            char ch = str[i];
            if(root->childcount == 1){
                ans.push_back(ch);
                int index = ch - 'a';
                root = root->children[index];
            }else break;
            if(root->isTerminal)break;
        }
        
    }
};
class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        Trie* t = new Trie();
        for(int i = 0 ; i < strs.size() ; i++){
            t->insertWord(strs[i]);
             if(strs.size() == 0 || strs[i] == "")return "";
        }
       
        string first = strs[0];
        string ans = "";
        t->lcp(first , ans);
        return ans;
    }
};
